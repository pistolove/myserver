<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!-- 数据库连接池配置 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass">
            <value>${jdbc.driver}</value>
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.user}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>

        <!-- 连接池中保留的最小连接数 -->
        <property name="minPoolSize">
            <value>${jdbc.minimumConnectionCount}</value>
        </property>
        <!-- 连接池中保留的最大连接数，Default:15 -->
        <property name="maxPoolSize">
            <value>${jdbc.maximumConnectionCount}</value>
        </property>
        <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间，Default:3 -->
        <property name="initialPoolSize">
            <value>${jdbc.initialPoolSize}</value>
        </property>

        <!-- 最大空闲时间，60秒内未使用则连接被丢弃；若为0则永不丢弃，Default:0 -->
        <property name="maxIdleTime">
            <value>${jdbc.maxIdleTime}</value>
        </property>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数，Default:3 -->
        <property name="acquireIncrement">
            <value>${jdbc.acquireIncrement}</value>
        </property>
        <!-- 每60秒检查所有连接池中的空闲连接，Default:0 -->
        <property name="idleConnectionTestPeriod">
            <value>${jdbc.idleConnectionTestPeriod}</value>
        </property>
        <!-- 定义在从数据库获取新连接失败后重复尝试的次数，Default:30 -->
        <property name="acquireRetryAttempts">
            <value>${jdbc.acquireRetryAttempts}</value>
        </property>
        <!-- 重试的频率 -->
        <property name="acquireRetryDelay">
            <value>${jdbc.acquireRetryDelay}</value>
        </property>
        <!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。 但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。 
            如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default:false -->
        <property name="breakAfterAcquireFailure">
            <value>${jdbc.breakAfterAcquireFailure}</value>
        </property>
        <!-- 因性能消耗大请只在需要的时候使用它。 如果设为true那么在每个connection提交的 时候都将校验其有效性。 建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default:false -->
        <property name="testConnectionOnCheckout">
            <value>${jdbc.testConnectionOnCheckout}</value>
        </property>
        <!-- true表示每次把连接checkin到pool里的时候测试其有效性，因为是个事后操作，所以是异步的， 应用端不需要等待测试结果，但同样会造成至少多一倍的数据库调用。 -->
        <property name="testConnectionOnCheckin">
            <value>${jdbc.testConnectionOnCheckin}</value>
        </property>

        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default:0 -->
        <property name="maxStatements">
            <value>${jdbc.maxStatements}</value>
        </property>
        <property name="maxStatementsPerConnection">
            <value>${jdbc.maxStatementsPerConnection}</value>
        </property>
    </bean>

    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml" />
        <property name="plugins">  
     	<array>
        	<bean id="customMybatisInterceptor" class="com.lib.custom.CustomMybatisInterceptor"/>
     	</array>
     </property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="mysql" />
    </bean>
</beans>
